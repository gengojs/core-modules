{"version":3,"sources":["modules/inputify.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;4BAAkB,eAAe;;;;sBACnB,QAAQ;;;;0BACC,cAAc;;;;AACrC,IAAI,GAAG,GAAG,+BAAM,MAAM,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;IAoBlB,QAAQ;YAAR,QAAQ;;AACD,WADP,QAAQ,CACA,MAAM,EAAE,IAAI,EAAE;0BADtB,QAAQ;;AAER,+BAFA,QAAQ,6CAEF,MAAM,EAAE,IAAI,EAAE;AACpB,OAAG,CAAC,KAAK,aAAW,QAAQ,CAAC,IAAI,oBAAsB,CACpD,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,CAC/B,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAC9B,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;GACpC;;;;;;;;;;;;;;eAPC,QAAQ;;WAYN,kBAAG;AACL,SAAG,CAAC,KAAK,aAAW,QAAQ,CAAC,IAAI,oBAAsB,CAAC;AACxD,aAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;KAC7B;;;;;;;;WAKM,sBAAG;AACR,SAAG,CAAC,KAAK,aAAW,QAAQ,CAAC,IAAI,uBAAyB,CAAC;AAC3D,aAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;KAC3B;;;;;;;;WAKG,kBAAG;AACP,SAAG,CAAC,KAAK,aAAW,QAAQ,CAAC,IAAI,oBAAsB,CAAC;AACxD,aAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;KAC7B;;;;;;;;WAMM,mBAAG;AACN,SAAG,CAAC,KAAK,aAAW,QAAQ,CAAC,IAAI,qBAAuB,CAAC;AACzD,aAAO,CAAC,oBAAE,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;KACvC;;;;;;;;WAKM,qBAAG;AACV,SAAG,CAAC,KAAK,aAAW,QAAQ,CAAC,IAAI,uBAAyB,CAAC;AAC3D,aAAO,CAAC,oBAAE,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;KACzC;;;SAhDG,QAAQ;;;AA0Dd,SAAS,QAAQ,CAAC,MAAM,EAAW;AACjC,cAAY,CAAC;;oCADc,IAAI;AAAJ,QAAI;;;AAE/B,SAAO,IAAI,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;CACnC;;;;;qBAKc,QAAQ","file":"modules/inputify.js","sourcesContent":["import debug from 'gengojs-debug';\nimport _ from 'lodash';\nimport Extractify from './extractify';\nvar log = debug('core');\n/*\n    ## Input\n    \n    **Definition**: \n\n    1. The first argument must be a string or an object.\n      * The string is the phrase to i18n\n      * The object must contain a 'phrase' key with a string value to i18n\n    2. The second must be n number of strings, an array or an object.\n      * The n number of strings will represent sprint-f\n      * The array will represent sprint-f\n      * The object will represent sprint-f, or other arguments\n*/\n\n/**\n * This class extends the Extractify class\n * by adding an API wrapper around it.\n * @class Inputify\n */\nclass Inputify extends Extractify {\n  constructor(phrase, args) {\n      super(phrase, args);\n      log.debug(`class: ${Inputify.name}`, `process: phrase`)\n        .info('extract:', this.extracts)\n        .info('phrase:', this.phrase())\n        .info('args:', this.arguments());\n    }\n    /**\n     * Returns the extracted phrase.\n     * @return {String} - The phrase to internationalize.\n     */\n  phrase() {\n      log.debug(`class: ${Inputify.name}`, `process: phrase`);\n      return this.extracts.phrase;\n    }\n    /**\n     * Returns the extracted arguments.\n     * @return {Array} - The extracted arguments.\n     */\n  arguments() {\n      log.debug(`class: ${Inputify.name}`, `process: arguments`);\n      return this.extracts.args;\n    }\n    /**\n     * Returns the extracted values.\n     * @return {Object} - The extracted values (plain object).\n     */\n  values() {\n    log.debug(`class: ${Inputify.name}`, `process: values`);\n    return this.extracts.values;\n  }\n\n  /**\n   * Determines whether the arguments are empty.\n   * @return {Boolean} True if the object is empty.\n   */\n  hasArgs() {\n      log.debug(`class: ${Inputify.name}`, `process: hasArgs`);\n      return !_.isEmpty(this.extracts.args);\n    }\n    /**\n     * Determines whether the values are empty.\n     * @return {Boolean} True if the object is empty.\n     */\n  hasValues() {\n    log.debug(`class: ${Inputify.name}`, `process: hasValues`);\n    return !_.isEmpty(this.extracts.values);\n  }\n\n}\n\n/** \n * Returns instance of Inputify.\n * @param  {String | Object} phrase The phrase to parse.\n * @param  {...String | Object | Array} args The arguments to apply to the phrase.\n * @return {Inputify}           An instance of Inputify\n */\nfunction inputify(phrase, ...args) {\n  'use strict';\n  return new Inputify(phrase, args);\n}\n\n/** \n * @module inputify\n */\nexport default inputify;"],"sourceRoot":"/source/"}