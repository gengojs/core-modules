{"version":3,"sources":["modules/inputify.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;4BAGkB,eAAe;;;;sBACnB,QAAQ;;;;0BACC,cAAc;;;;;;;;;;IAO/B,QAAQ;YAAR,QAAQ;;AACD,WADP,QAAQ,CACA,MAAM,EAAE,IAAI,EAAE;0BADtB,QAAQ;;AAER,+BAFA,QAAQ,6CAEF,MAAM,EAAE,IAAI,EAAE;AACpB,mCAAM,MAAM,EAAE,OAAO,cAAY,QAAQ,CAAC,IAAI,yBAA2B,CAAC;AAC1E,mCAAM,MAAM,EAAE,MAAM,cAAY,QAAQ,CAAC,IAAI,oBAC3B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,mBAC9B,IAAI,CAAC,MAAM,EAAE,iBACf,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAG,CAAC;GACpD;;;;;;;eARC,QAAQ;;WAaN,kBAAG;AACL,qCAAM,MAAM,EAAE,OAAO,cAAY,QAAQ,CAAC,IAAI,oBAAsB,CAAC;AACrE,aAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;KAC7B;;;;;;;;WAKM,sBAAG;AACR,qCAAM,MAAM,EAAE,OAAO,cAAY,QAAQ,CAAC,IAAI,uBAAyB,CAAC;AACxE,aAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;KAC3B;;;;;;;;WAKG,kBAAG;AACP,qCAAM,MAAM,EAAE,OAAO,cAAY,QAAQ,CAAC,IAAI,oBAAsB,CAAC;AACrE,aAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;KAC7B;;;;;;;;WAMM,mBAAG;AACN,qCAAM,MAAM,EAAE,OAAO,cAAY,QAAQ,CAAC,IAAI,qBAAuB,CAAC;AACtE,aAAO,CAAC,oBAAE,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;KACvC;;;;;;;;WAKM,qBAAG;AACV,qCAAM,MAAM,EAAE,OAAO,cAAY,QAAQ,CAAC,IAAI,uBAAyB,CAAC;AACxE,aAAO,CAAC,oBAAE,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;KACzC;;;SAjDG,QAAQ;;;qBAqDC,UAAC,MAAM,EAAc;AAClC,cAAY,CAAC;;oCADY,IAAI;AAAJ,QAAI;;;AAE7B,SAAO,IAAI,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;CACnC","file":"modules/inputify.js","sourcesContent":["/**\n * This module extracts the phrase and arguments.\n */\nimport debug from 'gengojs-debug';\nimport _ from 'lodash';\nimport Extractify from './extractify';\n\n/**\n * This class extends the Extractify class\n * by adding an API wrapper around it.\n * @class\n */\nclass Inputify extends Extractify {\n  constructor(phrase, args) {\n      super(phrase, args);\n      debug('core', 'debug', `class: ${Inputify.name}`, `process: constructor`);\n      debug('core', 'info', `class: ${Inputify.name}`,\n        `\\n\\textract: ${JSON.stringify(this.extracts)}`,\n        `\\n\\tphrase: ${this.phrase()}`,\n        `\\n\\targs: ${JSON.stringify(this.arguments())}`);\n    }\n    /**\n     * Returns the extracted phrase.\n     * @return {string} - The phrase to internationalize.\n     */\n  phrase() {\n      debug('core', 'debug', `class: ${Inputify.name}`, `process: phrase`);\n      return this.extracts.phrase;\n    }\n    /**\n     * Returns the extracted arguments.\n     * @return {Array} - The extracted arguments\n     */\n  arguments() {\n      debug('core', 'debug', `class: ${Inputify.name}`, `process: arguments`);\n      return this.extracts.args;\n    }\n    /**\n     * Returns the extracted values.\n     * @return {Object} - The extracted values (plain object)\n     */\n  values() {\n    debug('core', 'debug', `class: ${Inputify.name}`, `process: values`);\n    return this.extracts.values;\n  }\n\n  /**\n   * Determines whether the arguments are empty.\n   * @return {boolean} True if the object is empty \n   */\n  hasArgs() {\n      debug('core', 'debug', `class: ${Inputify.name}`, `process: hasArgs`);\n      return !_.isEmpty(this.extracts.args);\n    }\n    /**\n     * Determines whether the values are empty.\n     * @return {boolean} True if the object is empty \n     */\n  hasValues() {\n    debug('core', 'debug', `class: ${Inputify.name}`, `process: hasValues`);\n    return !_.isEmpty(this.extracts.values);\n  }\n\n}\n\nexport default (phrase, ...args) => {\n  'use strict';\n  return new Inputify(phrase, args);\n};"],"sourceRoot":"/source/"}