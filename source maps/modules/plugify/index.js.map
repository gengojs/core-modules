{"version":3,"sources":["modules/plugify/index.js"],"names":[],"mappings":"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","file":"modules/plugify/index.js","sourcesContent":["/**\n * This module initializes the plugins.\n */\nimport _ from 'lodash';\nimport debug from 'gengojs-debug';\nclass Plugify {\n  constructor(plugins, options, defaults) {\n    debug('core', 'debug', `class: ${Plugify.name}`, `process: constructor`);\n    // Initialize the plugin\n    this.plugins = this.init();\n    var plugs = this.plugs(plugins);\n      // Register and then restrict the\n      // plugins to one plugin per type\n      // and add defaults if none exist\n      _.forEach(plugs, function(plugin) {\n        // Assert\n        this.assert(plugin);\n        var type = this.normalize(plugin.package.type);\n        // If the default plugin already exists\n        // then remove the default and replace it with\n        // the user defined plugin\n        if (this.plugins[type].length === 1) {\n          if(!_.isUndefined(defaults))\n            this.plugins[type].pop();\n          // Set the plugin attributes\n          this.setAttributes(plugin, options);\n          // If there are multiple plugins of the same type\n          // restrict it to one plugin\n        } else if (this.plugins[type].length > 1) {\n          var length = this.plugins[type].length - 1;\n          while (length !== 0) {\n            if(!_.isUndefined(defaults))\n              this.plugins[type].pop();\n            length--;\n          }\n          // Since no there are no default plugins,\n          // just add the plugin to the stack\n        }else{\n          this.setAttributes(plugin, options);\n        }\n      }, this);\n      \n      // Remove the plugin from array\n      // and set it as the root\n      // e.g. this.plugins.backend => array\n      // becomes this.plugins.backend => object\n      plugs = this.plugins;\n      for (var key in plugs) {\n        if (plugs.hasOwnProperty(key)) {\n          var element = plugs[key];\n          if(element[0]){\n            var {type} = element[0].package;\n            this.plugins[type] = element[0];\n          }\n        }\n      }\n      \n     _.forEach(this.plugins,(value, key)=>{\n         debug('core', 'info', \n        `class: ${Plugify.name}`, `plugins: ${key}`);\n     });\n  }\n\n  setAttributes(plugin, options) {\n    debug('core', 'debug', `class: ${Plugify.name}`, `process: setAttributes`);\n    var {\n      main, defaults\n    } = plugin;\n    var {\n      name, type\n    } = plugin.package;\n    type = this.normalize(type);\n    // Set the plugin fn\n    this.plugins[type][name] = main;\n    // Set the package\n    this.plugins[type][name].package = plugin.package;\n    // Insert plugins as callbacks\n    this.plugins[type].push(main);\n    // Set the default options by merging with user's\n    options[type] = _.defaults(options, defaults);\n  }\n  /* Normalizes a string */\n  normalize(str) {\n    debug('core', 'debug', `class: ${Plugify.name}`, `process: normalize`);\n    return str.toLowerCase().replace('-', '');\n  }\n  // Initialize\n  init() {\n    debug('core', 'debug', `class: ${Plugify.name}`, `process: init`);\n    return _.assign({}, {\n      parser: [],\n      router: [],\n      backend: [],\n      api: [],\n      header: [],\n      localize: []\n    });\n  }\n  /**\n   * plugs asserts that the plugins follows the criteria and\n   * creates an array of plugin(s)\n   * @param {object|Array|Function} plugins - The plugins to assert.\n   * @return {Array} An array of plugins\n   */\n  plugs (plugins){\n    debug('core', 'debug', `class: ${Plugify.name}`, `process: plugs`);\n    var plugs = [];\n      // 'plugins' is a plain object\n      if (_.isPlainObject(plugins)){\n        // A single ship exists\n        if (_.has(plugins, 'main')) plugs.push(plugins);\n        else _.forOwn(plugins, (ship)=>{\n           try {\n             // Assert that ship is a function\n             if (!_.isFunction(ship)) throw new Error\n              ('Uh oh! The ship must be a function!');\n            if (!_.isPlainObject(ship())) throw new Error\n              ('Woops! Did the ship forget to return a plain object?');\n           } catch (error) {\n              debug('core', 'error', `class: ${Plugify.name}`, \n                `error: ${error.stack || error.toString()}`);  \n           }\n           plugs.push(ship());\n        });\n      }\n      if (_.isArray(plugins)) plugs = plugins;\n      if (_.isFunction(plugins)) {\n        if (!_.isPlainObject(plugins())) throw new Error\n          ('Woops! Did the ship forget to return a plain object?');\n        plugs.push(plugins());\n      }\n      return plugs;\n  }\n  /**\n   * 'assert' asserts the plugin and makes sure that the plugin\n   * is in proper fomrat.\n   * @param {object} plugin - The plugin to assert.\n   */\n  assert(plugin) {\n    debug('core', 'debug', `class: ${Plugify.name}`, `process: assert`);\n    try {\n      if (_.has(plugin, 'main')) throw new Error\n        ('Woops! Did you forget the main function?');\n      if (_.has(plugin, 'package')) throw new Error\n        ('Woops! Did you forget the package?');\n      if (_.has(plugin.package, 'type')) throw new Error\n        ('Woops! Did you forget the \"type\" of plugin?');\n      if (_.has(plugin.package, 'name')) throw new Error\n        ('Woops! Did you forget the \"name\" of plugin?');\n      if (!_.has(plugin.package, 'defaults')) throw new Error\n        ('Woops! Did you forget to add \"defaults\"?');\n      if (_.has(plugin, 'defaults')) throw new Error\n        ('Woops! Did you forget to add the \"defaults\"?');\n    } catch (error) { \n        debug('core', 'error', `class: ${Plugify.name}`, \n                `error: ${error.stack || error.toString()}`); \n    }\n  }\n}\n\n\nexport default (plugins, options, defaults) => {\n  'use strict';\n  return new Plugify(plugins, options, defaults).plugins;\n};\n"],"sourceRoot":"/source/"}