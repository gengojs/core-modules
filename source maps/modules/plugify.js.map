{"version":3,"sources":["modules/plugify.js"],"names":[],"mappings":"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","file":"modules/plugify.js","sourcesContent":["import _ from 'lodash';\nimport debug from 'gengojs-debug';\nlet log = debug('core');\n/**\n * This class determines whether the\n * plugins are properly shipped and\n * sets them for the core.\n * @class Plugify\n */\nclass Plugify {\n  constructor(plugins, options, defaults) {\n      log.debug(`class: ${Plugify.name}`, `process: constructor`);\n      // Type stack to keep track which type has been plugged in\n      this.types = ['api', 'backend', 'parser', 'header', 'localize', 'router'];\n      // Initialize the plugin\n      this.plugins = this.init();\n      this.register(plugins, options, defaults);\n      this.bundle();\n      _.forEach(this.plugins, (value, key) => {\n        log.info(\n          `class: ${Plugify.name}`,\n          `plugins: type - ${key} typeof - ${typeof value}`);\n      });\n    }\n    /**\n     * Sets the attributes in the plugin\n     * @param {Object} plugin  The plugin to set its attributes.\n     * @param {Object} options The options to apply\n     */\n  setAttributes(plugin, options) {\n      log.debug(`class: ${Plugify.name}`, `process: setAttributes`);\n      var {\n        main, defaults\n      } = plugin;\n      var {\n        name, type\n      } = plugin.package;\n      type = this.normalize(type);\n      // Set the plugin fn\n      this.plugins[type][name] = main;\n      // Set the package\n      this.plugins[type][name].package = plugin.package;\n      // Insert plugins as callbacks\n      this.plugins[type].push(main);\n      // Set the default options by merging with user's\n      options[type] = _.defaults(options, defaults);\n    }\n    /**\n     * Normalizes a string\n     * @param  {String} str The string to normalize\n     * @return {String}     The normalized string\n     * @private\n     */\n  normalize(str) {\n      log.debug(`class: ${Plugify.name}`, `process: normalize`);\n      return str.toLowerCase().replace('-', '');\n    }\n    /**\n     * Initializes the plugin's stack\n     * @return {Object} The plugin statck\n     * @private\n     */\n  init() {\n      log.debug(`class: ${Plugify.name}`, `process: init`);\n      return _.assign({}, {\n        parser: [],\n        router: [],\n        backend: [],\n        api: [],\n        header: [],\n        localize: []\n      });\n    }\n    /**\n     * Asserts that the plugins follows the definition and\n     * creates an array of plugin(s)\n     * @param {Object | Array| Function} plugins - The plugins to assert.\n     * @return {Array} An array of plugins\n     */\n  plugs(plugins) {\n      log.debug(`class: ${Plugify.name}`, `process: plugs`);\n      var plugs = [];\n      // 'plugins' is a plain object\n      if (_.isPlainObject(plugins)) {\n        // A single ship exists\n        if (_.has(plugins, 'main')) plugs.push(plugins);\n        else _.forOwn(plugins, (ship) => {\n          try {\n            // Assert that ship is a function\n            if (!_.isFunction(ship)) throw new Error('Uh oh! The ship must be a function!');\n            if (!_.isPlainObject(ship())) throw new Error('Woops! Did the ship forget to return a plain object?');\n          } catch (error) {\n            log.error(`class: ${Plugify.name}`,\n              `error: ${error.stack || error.toString() }`);\n          }\n          plugs.push(ship());\n        });\n      }\n      if (_.isArray(plugins)) plugs = plugins;\n      if (_.isFunction(plugins)) {\n        if (!_.isPlainObject(plugins())) throw new Error('Woops! Did the ship forget to return a plain object?');\n        plugs.push(plugins());\n      }\n      return plugs;\n    }\n    /**\n     * Asserts the plugin is in proper format.\n     * @param {object} plugin - The plugin to assert.\n     * @private\n     */\n  assert(plugin) {\n      log.debug(`class: ${Plugify.name}`, `process: assert`);\n      try {\n        if (_.has(plugin, 'main')) throw new Error('Woops! Did you forget the main function?');\n        if (_.has(plugin, 'package')) throw new Error('Woops! Did you forget the package?');\n        if (_.has(plugin.package, 'type')) throw new Error('Woops! Did you forget the \"type\" of plugin?');\n        if (_.has(plugin.package, 'name')) throw new Error('Woops! Did you forget the \"name\" of plugin?');\n        if (!_.has(plugin.package, 'defaults')) throw new Error('Woops! Did you forget to add \"defaults\"?');\n        if (_.has(plugin, 'defaults')) throw new Error('Woops! Did you forget to add the \"defaults\"?');\n      } catch (error) {\n        log.error(`class: ${Plugify.name}`,\n          `error: ${error.stack || error.toString() }`);\n      }\n    }\n    /**\n     * Registers the plugin\n     * @param  {Object} plugins  The plugin to register\n     * @param  {Object} options  The options to apply\n     * @param  {Object} defaults The default plugins\n     */\n  register(plugins, options, defaults) {\n      var plugs = this.plugs(plugins);\n      // Register and then restrict the\n      // plugins to one plugin per type\n      // and add defaults if none exist\n      _.forEach(plugs, function(plugin) {\n        // Assert\n        if (!_.isEmpty(defaults)) this.assert(plugin);\n        else log\n          .warn(`class: ${Plugify.name}`, `process: register`)\n          .warn('Defaults is empty! Possibly in testing mode?');\n        var type = this.normalize(plugin.package.type);\n        // If the default plugin already exists\n        // then remove the default and replace it with\n        // the user defined plugin\n        if (this.plugins[type].length === 1) {\n          if (!_.isUndefined(defaults))\n            this.plugins[type].pop();\n          // Set the plugin attributes\n          this.setAttributes(plugin, options);\n          // If there are multiple plugins of the same type\n          // restrict it to one plugin\n        } else if (this.plugins[type].length > 1) {\n          var length = this.plugins[type].length - 1;\n          while (length !== 0) {\n            if (!_.isUndefined(defaults))\n              this.plugins[type].pop();\n            length--;\n          }\n          // Since no there are no default plugins,\n          // just add the plugin to the stack\n        } else {\n          this.setAttributes(plugin, options);\n        }\n      }, this);\n    }\n    /**\n     * Bundles the plugins and transforms the plugin\n     * stack from an array to an object. It also makes sure\n     * that the stack has a fn placeholder to prevent an undefined\n     * object from being used as a function\n     * @private\n     */\n  bundle() {\n    // Remove the plugin from array\n    // and set it as the root\n    // e.g. this.plugins.backend => array\n    // becomes this.plugins.backend => object\n    var plugs = this.plugins;\n    _.forEach(plugs, (plugin, type) => {\n      if (plugin[0]) {\n        // Get the index of the type from the types stack\n        var index = this.types.indexOf(this.normalize(type));\n        // Remove the type from the stack since it is registered\n        if (index > -1) this.types.splice(index, 1);\n        // Register the plugin\n        this.plugins[this.normalize(type)] = plugin[0];\n      }\n    });\n    // Set the placeholder\n    _.forEach(this.types, (type) => {\n      this.plugins[this.normalize(type)] = () => {};\n    });\n  }\n}\n\n/**\n * Returns the plugins after creating an instance\n * of Plugify\n * @param  {Object | Function} plugins  [description]\n * @param  {Object} options  The options to apply to the plugins\n * @param  {Object} defaults The default plugins\n * @return {Plugify}         An instance of Plugify\n */\nfunction plugify(plugins, options = {}, defaults = {}) {\n  'use strict';\n  return new Plugify(plugins, options, defaults).plugins;\n}\n/**\n * @module plugify\n */\nexport default plugify;"],"sourceRoot":"/source/"}