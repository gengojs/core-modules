{"version":3,"sources":["modules/inputify/index.js"],"names":[],"mappings":"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","file":"modules/inputify/index.js","sourcesContent":["/**\n * This module extracts the phrase and arguments.\n */\nimport debug from 'gengojs-debug';\nimport _ from 'lodash';\n/**\n * Extractify\n */\nclass Extractify {\n  constructor(phrase, array) {\n    debug('core', 'debug', `class: ${Extractify.name}`, `process: constructor`);\n    var values = {},\n      args = [],\n      value, length = array ? array.length : 0;\n    debug('core', 'debug',\n      `class: ${Extractify.name}`,\n      `array: ${JSON.stringify(array)}`,\n      `length: ${length}`);\n    // If the arguments is greater than 2 (because of offset)\n    if (length > 1) {\n      // Just append them to the array\n      array.forEach(item => args.push(item));\n    }\n    // If they are exactly 2 argument\n    else if (length === 1) {\n      // Get the first value\n      value = array[0];\n      // Set arguments [...]\n      if (_.isArray(value)) args = value;\n      else if (_.isPlainObject(value)) args = [];\n      else args.push(value);\n      // Set values {...}\n      values = _.isPlainObject(value) ? value : {};\n    }\n    // If called like __({phrase:'hello', locale:'en'})\n    if (_.isPlainObject(phrase) && !_.isEmpty(values)) {\n      if (_.has(phrase, 'locale')) values.locale = phrase.locale;\n      if (_.has(phrase, 'phrase')) phrase = phrase.phrase;\n    }\n    this.phrase = phrase;\n    this.values = values;\n    this.args = args;\n  }\n  hasValues() {\n    debug('core', 'debug', `class: ${Extractify.name}`, `process: hasValues`);\n    return !_.isEmpty(this.values);\n  }\n  hasArgs() {\n    debug('core', 'debug', `class: ${Extractify.name}`, `process: hasArgs`);\n    return !_.isEmpty(this.args);\n  }\n}\n/**\n * Inputify\n */\nclass Inputify {\n  constructor(phrase, args) {\n      debug('core', 'debug', `class: ${Inputify.name}`, `process: constructor`);\n      this._extract = new Extractify(phrase, args);\n      this._phrase = this._extract.phrase;\n      this._args = args;\n      debug('core', 'info', `class: ${Inputify.name}`,\n        `\\n\\textract: ${JSON.stringify(this._extract)}`,\n        `\\n\\tphrase: ${this._phrase}`,\n        `\\n\\targs: ${JSON.stringify(this._args)}`);\n    }\n    /**\n     * phrase\n     * @return {string} - The phrase to internationalize.\n     */\n  phrase() {\n      debug('core', 'debug', `class: ${Inputify.name}`, `process: phrase`);\n      return this._phrase;\n    }\n    /**\n     * arguments\n     * @return {Array} - The original arguments before extraction.\n     */\n  arguments() {\n      debug('core', 'debug', `class: ${Inputify.name}`, `process: arguments`);\n      return this._args;\n    }\n    /**\n     * other\n     * @return {object} - The other arguments after extraction in\n     * the form of an API.\n     * @example\n     * new Inputify(phrase, args).other().arguments();\n     * new Inputify(phrase, args).other().values();\n     * new Inputify(phrase, args).other().hasArgs();\n     * new Inputfiy(phrase, args).other().hasValues();\n     */\n  other() {\n    debug('core', 'debug', `class: ${Inputify.name}`, `process: other`);\n    let args = () => {\n      return this._extract.args;\n    };\n    let values = () => {\n      return this._extract.values;\n    };\n    let hasArgs = () => {\n      return this._extract.hasArgs();\n    };\n    let hasValues = () => {\n      return this._extract.hasValues();\n    };\n    return {\n      args, values, hasArgs, hasValues\n    };\n  }\n}\n\nexport default (phrase, ...args) => {\n  'use strict';\n  return new Inputify(phrase, args);\n};"],"sourceRoot":"/source/"}