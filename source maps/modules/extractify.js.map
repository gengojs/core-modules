{"version":3,"sources":["modules/extractify.js"],"names":[],"mappings":";;;;;;;;;;sBAAc,QAAQ;;;;4BACJ,eAAe;;;;;;;;;;IAM3B,UAAU,GACH,SADP,UAAU,CACF,MAAM,EAAE,KAAK,EAAE;wBADvB,UAAU;;AAEZ,iCAAM,MAAM,EAAE,OAAO,cAAY,UAAU,CAAC,IAAI,yBAA2B,CAAC;AAC5E,MAAI,MAAM,GAAG,EAAE;MACb,IAAI,GAAG,EAAE;MACT,KAAK;MAAE,MAAM,GAAG,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;AAC3C,iCAAM,MAAM,EAAE,OAAO,cACT,UAAU,CAAC,IAAI,cACf,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,eACpB,MAAM,CAAG,CAAC;;AAEvB,MAAI,MAAM,GAAG,CAAC,EAAE;;AAEd,SAAK,CAAC,OAAO,CAAC,UAAA,IAAI;aAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;KAAA,CAAC,CAAC;GACxC;;OAEI,IAAI,MAAM,KAAK,CAAC,EAAE;;AAErB,WAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;;AAEjB,UAAI,oBAAE,OAAO,CAAC,KAAK,CAAC,EAAE,IAAI,GAAG,KAAK,CAAC,KAC9B,IAAI,oBAAE,aAAa,CAAC,KAAK,CAAC,EAAE,IAAI,GAAG,EAAE,CAAC,KACtC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;AAEtB,YAAM,GAAG,oBAAE,aAAa,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,EAAE,CAAC;KAC9C;;AAED,MAAI,oBAAE,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAE,OAAO,CAAC,MAAM,CAAC,EAAE;AACjD,QAAI,oBAAE,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,EAAE,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;AAC3D,QAAI,oBAAE,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,EAAE,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;GACrD;AACD,MAAI,CAAC,QAAQ,GAAG;AACd,UAAM,EAAN,MAAM,EAAE,MAAM,EAAN,MAAM,EAAE,IAAI,EAAJ,IAAI;GACrB,CAAC;CACH;;qBAGY,UAAU","file":"modules/extractify.js","sourcesContent":["import _ from 'lodash';\nimport debug from 'gengojs-debug';\n/**\n * This class extracts the input and seperates the arguments\n * into phrase, args, and values.\n * @class\n */\nclass Extractify {\n  constructor(phrase, array) {\n    debug('core', 'debug', `class: ${Extractify.name}`, `process: constructor`);\n    var values = {},\n      args = [],\n      value, length = array ? array.length : 0;\n    debug('core', 'debug',\n      `class: ${Extractify.name}`,\n      `array: ${JSON.stringify(array)}`,\n      `length: ${length}`);\n    // If the arguments is greater than 2 (because of offset)\n    if (length > 1) {\n      // Just append them to the array\n      array.forEach(item => args.push(item));\n    }\n    // If they are exactly 2 arguments\n    else if (length === 1) {\n      // Get the first value\n      value = array[0];\n      // Set arguments [...]\n      if (_.isArray(value)) args = value;\n      else if (_.isPlainObject(value)) args = [];\n      else args.push(value);\n      // Set values {...}\n      values = _.isPlainObject(value) ? value : {};\n    }\n    // If called like __({phrase:'hello', locale:'en'})\n    if (_.isPlainObject(phrase) && !_.isEmpty(values)) {\n      if (_.has(phrase, 'locale')) values.locale = phrase.locale;\n      if (_.has(phrase, 'phrase')) phrase = phrase.phrase;\n    }\n    this.extracts = {\n      phrase, values, args\n    };\n  }\n}\n\nexport default Extractify;"],"sourceRoot":"/source/"}