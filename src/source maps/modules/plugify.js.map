{"version":3,"sources":["modules/plugify.js"],"names":[],"mappings":"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","file":"modules/plugify.js","sourcesContent":["import _ from 'lodash';\nimport debug from 'gengojs-debug';\nlet log = debug('core');\n/**\n * This class determines whether the\n * plugins are properly shipped and\n * sets them for the core.\n * @class Plugify\n */\nclass Plugify {\n  constructor(plugins, options, defaults) {\n      log.debug(`class: ${Plugify.name}`, `process: constructor`);\n      // Local options\n      this.options = {};\n      this.defaults = {};\n      // Initialize the plugins\n      this.plugins = (() => {\n        // Check if defaults is empty\n        if (_.isEmpty(defaults)) {\n          // Fill the defaults with placeholders (functions that don't do anything)\n          _.forEach(['api', 'backend', 'parser', 'header', 'localize', 'router'], item => {\n            this.defaults[Plugify.normalize(item)] = () => {};\n          });\n        } else Plugify.unPack(defaults, (key, plugin) => {\n          // Unpack the gengo-pack and generate the default plugins\n          Plugify.setPlugin(this.defaults, plugin, this.options);\n        });\n        return this.defaults;\n      })();\n      // Register the plugins\n      this.register(plugins);\n      // Debug\n      _.forOwn(this.plugins, (value, key) => {\n        var name = value.package ? value.package.name : '';\n        log.info(\n          `class: ${Plugify.name}`,\n          `plugins: name - ${name}, type - ${key}, typeof - ${typeof value}`);\n      });\n      // Create the default options\n      _.defaultsDeep(options, this.options);\n    }\n    /**\n     * Registers the plugin\n     * @param {Function | Array | Object} The plugin to register\n     */\n  register(plugins) {\n    log.debug(`class: ${Plugify.name}`, `process: register`);\n    var process = (plugin) => {\n      if (_.isPlainObject(plugin)) {\n        if (Plugify.isPack(plugin)) {\n          Plugify.unPack(plugin, (key, p) => {\n            if (Plugify.assert(p)) {\n              Plugify.setPlugin(this.plugins, p, this.options);\n            }\n          });\n        } else\n        if (Plugify.assert(plugin)) {\n          Plugify.setPlugin(this.plugins, plugin, this.options);\n        }\n      }\n    };\n    if (_.isArray(plugins)) {\n      _.forEach(plugins, plugin => {\n        plugin = _.isFunction(plugin) ? plugin() :\n          _.isPlainObject(plugin) ? plugin : undefined;\n        process(plugin);\n      });\n    } else if (_.isFunction(plugins)) {\n      process(plugins());\n    } else if (_.isPlainObject(plugins)) process(plugins);\n  }\n  static isPack(plugin) {\n      return !_.has(plugin, 'main') && (() => {\n        return _.forEach(Object.keys(plugin), key =>\n          key === 'api' || key === 'parser' || key === 'backend' ||\n          key === 'header' || key === 'localize' || key === 'router');\n      })();\n    }\n    /**\n     * Unpacks the gengo-pack and returns the plugin\n     * through a callback\n     * @param {Object | Function} plugins The plugins to unpack.\n     * @param {Function} callback The callback function\n     */\n  static unPack(plugins, callback) {\n      _.forOwn(plugins, (plugin, type) => {\n        callback(type, _.isFunction(plugin) ? plugin() : plugin);\n      });\n    }\n    /**\n     * Sets the attributes of the plugin\n     * @param {Object} object  The object to set its attributes.\n     * @param {Object} plugin  The plugin to apply to the object\n     * @param {Object} options The options to apply\n     */\n  static setPlugin(object, plugin, options) {\n      log.debug(`class: ${Plugify.name}`, `process: setPlugin`);\n      var {\n        main, defaults\n      } = plugin;\n      var {\n        type\n      } = plugin.package;\n      type = Plugify.normalize(type);\n      if (object[type]) object[type] = {};\n      // Set the plugin fn\n      object[type] = main;\n      // Set the package\n      object[type].package = plugin.package;\n      // Set the default options\n      if (!options[type])\n        options[type] = defaults;\n    }\n    /**\n     * Normalizes a string\n     * @param  {String} str The string to normalize\n     * @return {String}     The normalized string\n     * @private\n     */\n  static normalize(str) {\n      return str.toLowerCase().replace('-', '');\n    }\n    /**\n     * Asserts the plugin is in proper format.\n     * @param {object} plugin - The plugin to assert.\n     * @private\n     */\n  static assert(plugin) {\n    log.debug(`class: ${Plugify.name}`, `process: assert`);\n    try {\n      if (!plugin) throw new Error('Whoops! Did you forget to ship your plugin?');\n      if (!_.has(plugin, 'main')) throw new Error('Whoops! Did you forget the main function?');\n      if (!_.has(plugin, 'package')) throw new Error('Whoops! Did you forget the package?');\n      if (!_.has(plugin.package, 'type')) throw new Error('Whoops! Did you forget the \"type\" of plugin?');\n      if (!_.has(plugin.package, 'name')) throw new Error('Whoops! Did you forget the \"name\" of plugin?');\n      if (!_.has(plugin, 'defaults')) throw new Error('Whoops! Did you forget to add the \"defaults\"?');\n    } catch (error) {\n      log.error(`class: ${Plugify.name}`,\n        error.stack || error.toString());\n      return false;\n    }\n    return true;\n  }\n}\n/**\n * Returns the plugins after creating an instance\n * of Plugify\n * @param  {Object | Function | Array} plugins  The user plugins or plugins to override the default\n * @param  {Object} options  The options to apply to the plugins\n * @param  {Object} defaults The default plugins\n * @return {Plugify}         An instance of Plugify\n */\nfunction plugify(plugins = {}, options = {}, defaults = {}) {\n  'use strict';\n  return new Plugify(plugins, options, defaults).plugins;\n}\n/**\n * @module plugify\n */\nexport default plugify;"],"sourceRoot":"/source/"}