{"version":3,"sources":["modules/optify.js"],"names":[],"mappings":";;;;;;;;;;;;;sBAGc,QAAQ;;;;oBACL,MAAM;;;;kBACR,IAAI;;;;sBACF,SAAS;;;;4BACR,eAAe;;;;AACjC,IAAI,GAAG,GAAG,+BAAM,MAAM,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;IAsBlB,MAAM,GACC,SADP,MAAM,CACE,OAAO,EAAE;wBADjB,MAAM;;AAER,KAAG,CAAC,KAAK,aAAW,MAAM,CAAC,IAAI,yBAA2B,CAAC;AAC3D,MAAI,CAAC,OAAO,GAAG,EAAE,CAAC;AAClB,MAAI,QAAQ,CAAC;AACb,MAAI;AACF,QAAI,oBAAE,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,oBAAE,OAAO,CAAC,OAAO,CAAC,EACjD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,KACpB,IAAI,oBAAE,QAAQ,CAAC,OAAO,CAAC,EAAE;;AAE5B,aAAO,GAAG,kBAAK,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC;;AAEzD,UAAI,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;AAClD,gBAAQ,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAC5B,YAAI,CAAC,OAAO,GAAG,QAAQ,CAAC;OACzB,MAAM,IAAI,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;;AAEjC,gBAAQ,GAAG,oBAAK,QAAQ,CAAC,gBAAG,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;AAC3D,YAAI,CAAC,OAAO,GAAG,QAAQ,CAAC;OACzB,MAAM;AACL,cAAM,IAAI,KAAK,CACZ,8CAA8C,GAC7C,qDAAqD,CAAC,CAAC;OAC5D;KACF,MAAM,IAAI,CAAC,OAAO,GAAG,QAAQ,IAAI,EAAE,CAAC;GACtC,CAAC,OAAO,KAAK,EAAE;AACd,OAAG,CAAC,KAAK,aAAW,MAAM,CAAC,IAAI,eACnB,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAA,CAAG,CAAC;GAChD;CACF;;;;;;;;;;AASH,SAAS,MAAM,CAAC,OAAO,EAAE;AACvB,cAAY,CAAC;AACb,SAAO,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC;CACpC;;;;;qBAKc,MAAM","file":"modules/optify.js","sourcesContent":["/**\n * This module reads or sets the initial options\n */\nimport _ from 'lodash';\nimport path from 'path';\nimport fs from 'fs';\nimport yaml from 'js-yaml';\nimport debug from 'gengojs-debug';\nlet log = debug('core');\n/*\n    ## Options\n    \n    **Definition**: \n\n    1. Options must be a string that specifies \n       the path to the options file.\n    2. Options must be an object that specifies the type \n       such as 'parser' followed by additional options for\n       that type.\n       \n    **Note**:\n    \n    * Every plugin created must offer default options and must \n      be responsible with letting the developers know about the options\n      for your plugin (through GitHub, etc).\n*/\n/**\n * This class sets the options used for the plugins\n * @class Optify\n */\nclass Optify {\n  constructor(options) {\n    log.debug(`class: ${Optify.name}`, `process: constructor`);\n    this.options = {};\n    var settings;\n    try {\n      if (_.isPlainObject(options) && !_.isEmpty(options))\n        this.options = options;\n      else if (_.isString(options)) {\n        // Normalize the string and if it ends in yml replace it\n        options = path.normalize(options.replace('yml', 'yaml'));\n        // Load the json or javascript file\n        if (/\\.json/.test(options) || /\\.js/.test(options)) {\n          settings = require(options);\n          this.options = settings;\n        } else if (/\\.yaml/.test(options)) {\n          // Load yaml\n          settings = yaml.safeLoad(fs.readFileSync(options, 'utf8'));\n          this.options = settings;\n        } else {\n          throw new Error\n            ('Oops! Did you forgt to add the extension? \\n' +\n              'The supported extensions are .json, .js, and .yaml.');\n        }\n      } else this.options = settings || {};\n    } catch (error) {\n      log.error(`class: ${Optify.name}`,\n        `error: ${error.stack || error.toString()}`);\n    }\n  }\n}\n\n/**\n * Returns the parsed options after\n * creating an instance of Optify\n * @param  {object} options The options to parse\n * @return {object}         The parsed options\n */\nfunction optify(options) {\n  'use strict';\n  return new Optify(options).options;\n}\n\n/**\n * @module optify\n */\nexport default optify;"],"sourceRoot":"/source/"}