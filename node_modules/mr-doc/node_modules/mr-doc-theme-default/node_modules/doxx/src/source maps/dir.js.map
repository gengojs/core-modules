{"version":3,"sources":["dir.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;oBAEI,MAAM;;;;uBACH,SAAS;;;;sBACf,QAAQ;;;;qBACJ,OAAO;;;;kBACV,IAAI;;;;QACZ,6BAA6B;;;;;;;IAM9B,GAAG;AACI,WADP,GAAG,GACO;0BADV,GAAG;GACS;;;;;;;;;eADZ,GAAG;;WASY,sBAAC,MAAM,EAAE,OAAO,EAAE;AACnC,UAAI,UAAU,GAAG,qBAAQ,IAAI,CAAC,MAAM,CAAC;;AACnC,YAAM,GAAG,OAAO,CAAC,MAAM,IAAI,EAAE;UAC7B,KAAK,GAAG,EAAE,CAAC;AACb,gBAAU,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE;AACjC,YAAI,GAAG,kBAAK,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AACnC,YAAI,WAAW,GAAG,oBAAE,GAAG,CAAC,MAAM,EAAE,UAAU,CAAC,EAAE;;AAE3C,iBAAQ,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAE;SACjC,CAAC,CAAC;;AAEH,YAAI,AAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,IAAK,WAAW,EAAE;AAC7C,eAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAClB;OACF,CAAC,CAAC;;AAEH,aAAO,KAAK,CAAC;KACd;;;;;;;;;;WAQgB,sBAAG;AAChB,aAAO,mBAAM,IAAI,EAAE,IACjB,OAAO,CAAC,GAAG,CAAC,IAAI,IAChB,OAAO,CAAC,GAAG,CAAC,QAAQ,IACpB,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC;KAC3B;;;;;;;;;WAMU,gBAAC,IAAI,EAAE;AAClB,UAAI;AACF,wBAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;AAClB,eAAO,IAAI,CAAC;OACb,CAAC,OAAO,GAAG,EAAE;AACZ,eAAO,EAAE,GAAG,IAAI,GAAG,CAAC,IAAI,KAAK,QAAQ,CAAA,AAAC,CAAC;OACxC;KACF;;;SApDG,GAAG;;;qBAwDM,GAAG","file":"dir.js","sourcesContent":["'use strict';\n\nimport Path from 'path';\nimport walkdir from 'walkdir';\nimport _ from 'lodash';\nimport osenv from 'osenv';\nimport fs from 'fs';\nimport 'source-map-support/register';\n\n/**\n * The class that manages directories.\n * @class Dir\n */\nclass Dir {\n  constructor() {}\n\n  /**\n   * Create an array of all the right files in the source dir\n   * @param  {String}   source source path\n   * @param  {Object}   options option object\n   * @return {Array}\n   */\n  static collectFiles(source, options) {\n    var dirtyFiles = walkdir.sync(source), // tee hee!\n      ignore = options.ignore || [],\n      files = [];\n    dirtyFiles.forEach(function (file) {\n      file = Path.relative(source, file);\n      var doNotIgnore = _.all(ignore, function (d) {\n        // return true if no part of the path is in the ignore/black list\n        return (file.indexOf(d) === -1);\n      });\n\n      if ((file.substr(-2) === 'js') && doNotIgnore) {\n        files.push(file);\n      }\n    });\n\n    return files;\n  }\n\n  /**\n   * Locates the home directory for the\n   * current operating system.\n   * Credits to @cliftonc\n   * @return {String} The home directory path\n   */\n  static getHomeDir() {\n      return osenv.home() ||\n        process.env.HOME ||\n        process.env.HOMEPATH ||\n        process.env.USERPROFILE;\n    }\n    /**\n     * Checks if the directory exists\n     * @param  {String} path The path to the directory\n     * @return {Boolean}      The truth value\n     */\n  static exists(path) {\n    try {\n      fs.statSync(path);\n      return true;\n    } catch (err) {\n      return !(err && err.code === 'ENOENT');\n    }\n  }\n}\n\n\nexport default Dir;"],"sourceRoot":"/source/"}