{"version":3,"sources":["compiler.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;oBAEI,MAAM;;;;kBACN,IAAI;;;;oBACJ,MAAM;;;;sBACT,QAAQ;;;;QACf,6BAA6B;;;;;;;IAK9B,QAAQ;AACD,WADP,QAAQ,CACA,MAAM,EAAE;0BADhB,QAAQ;;;;;;AAOR,QAAI,CAAC,IAAI,oBAAO,CAAC;;;AAGjB,QAAI,CAAC,OAAO,GAAG,MAAM,GAAG,MAAM,CAAC,OAAO,GAAG,EAAE,CAAC;;AAE5C,QAAI,CAAC,KAAK,GAAG,MAAM,GAAG,MAAM,CAAC,KAAK,GAAG,EAAE,CAAC;;AAExC,QAAI,CAAC,aAAa,EAAE,CAAC;GACtB;;;;;;;;;;eAfC,QAAQ;;WAuBL,iBAAC,MAAM,EAAE,QAAQ,EAAE;;UAGpB,IAAI,GACF,IAAI,CAAC,OAAO,CAAC,QAAQ,CADvB,IAAI;;;AAGN,aAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE;AAClD,cAAM,EAAE,IAAI;AACZ,gBAAQ,EAAE,IAAI;OACf,CAAC,CAAC,MAAM,CAAC,CAAC;KACZ;;;;;;;;;;;WAQY,yBAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE;;AAEpC,aAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE;AAClD,cAAM,EAAE,IAAI;;AAEZ,gBAAQ,EAAE,IAAI;OACf,CAAC,CAAC,MAAM,CAAC,CAAC;KACZ;;;;;;;;;WAMQ,qBAAC,QAAQ,EAAE;;AAEpB,UAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;AACzB,aAAO,IAAI,CAAC;KACb;;;;;;;;;WAOkB,6BAAC,IAAI,EAAE;;AAExB,UAAI,CAAC,QAAQ,GAAG,gBAAK,YAAY,CAC/B,kBAAK,OAAO,CAAC,SAAS,EAAE,IAAI,IAC1B,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;AAC5C,aAAO,IAAI,CAAC;KACb;;;;;;;;;;WAQS,oBAAC,OAAO,EAAE;;;;AAElB,UAAI,oBAAE,aAAa,CAAC,OAAO,CAAC,EAAE;AAC5B,YAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC;OAClD;;AAED,UAAI,oBAAE,OAAO,CAAC,OAAO,CAAC,EAAE;AACtB,4BAAE,OAAO,CAAC,OAAO,EAAE,UAAC,MAAM,EAAK;AAC7B,gBAAK,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;SAChD,CAAC,CAAC;OACJ;AACD,aAAO,IAAI,CAAC;KACb;;;;;;;;;WAOY,uBAAC,MAAM,EAAE;;;;;;AAMpB,UAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,MAAM,IAAI,UAAU,KAAK,EAAE;AAClD,eAAO,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAChC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CACrB,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CACrB,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CACvB,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CACtB,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CACtB,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;OAC1B,CAAC;;AAEF,aAAO,IAAI,CAAC;KACb;;;SAnHG,QAAQ;;;qBAuHN,QAAQ","file":"compiler.js","sourcesContent":["'use strict';\n\nimport jade from 'jade';\nimport File from 'fs';\nimport Path from 'path';\nimport _ from 'lodash';\nimport 'source-map-support/register';\n/**\n * The class that compiles the Jade template.\n * @class Compiler\n */\nclass Compiler {\n  constructor(parser) {\n\n      /**\n       * Jade used to compile the documentation\n       * @type {Jade} Jade compiler\n       */\n      this.jade = jade;\n\n      // Set the options\n      this.options = parser ? parser.options : {};\n      // Sets the files from the parser\n      this.files = parser ? parser.files : [];\n      // Set up the compiler's code filter\n      this.setCodeFilter();\n    }\n    /** \n     * Compiles the docs\n     * @param  {Object} locals   The local variable object\n     * @param  {String} template The template to compile\n     * @jsFiddle https://jsfiddle.net/iwatakeshi/pmp9ygwL/embedded/\n     * @return {String}          The compiled content\n     */\n  compile(locals, template) {\n      // Get the path (alias for filename)\n      var {\n        path\n      } = this.options.template;\n      // Return the compiled template\n      return this.jade.compile(template || this.template, {\n        pretty: true,\n        filename: path\n      })(locals);\n    }\n    /** \n     * Compiles the docs with a specified path\n     * @param  {Object} path     The path to compile\n     * @param  {Object} locals   The local variable object\n     * @param  {String} template The template to compile\n     * @return {String}          The compiled content\n     */\n  compileWithPath(path, locals, template) {\n      // Return the compiled template\n      return this.jade.compile(template || this.template, {\n        pretty: true,\n        // Alias for filename\n        filename: path\n      })(locals);\n    }\n    /** \n     * Sets the template\n     * @param {String} template The template\n     * @returns {Compiler} The compiler\n     */\n  setTemplate(template) {\n    // Template used to produce the documentation\n    this.template = template;\n    return this;\n  }\n\n  /** \n   * Sets the template\n   * @param {String} path The path to the template\n   * @returns {Compiler} The compiler\n   */\n  setTemplateWithPath(path) {\n    // Template used to produce the documentation\n    this.template = File.readFileSync(\n      Path.resolve(__dirname, path ||\n        this.options.template.path)).toString();\n    return this;\n  }\n\n  /** \n   * Sets custom filter(s)\n   * @param {Array|Object} filters The custom filter(s) to set\n   * @jsFiddle https://jsfiddle.net/iwatakeshi/sbr206cf/embedded/\n   * @returns {Compiler} The compiler\n   */\n  setFilters(filters) {\n    // Check if the fitlers is an object\n    if (_.isPlainObject(filters)) {\n      this.jade.filters[filters.name] = filters.filter;\n    }\n    // Check if the filters is an array\n    if (_.isArray(filters)) {\n      _.forEach(filters, (filter) => {\n        this.jade.filters[filter.name] = filter.filter;\n      });\n    }\n    return this;\n  }\n\n  /**\n   * Sets the code filter for `:code`\n   * @param {Function} filter The code filter to set\n   * @returns {Compiler} The compiler\n   */\n  setCodeFilter(filter) {\n    /**\n     * Jade support for filter `:code`\n     * @param  {String} block\n     * @return {String}\n     */\n    this.jade.filters.code = filter || function (block) {\n      return block.replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/#/g, '&#35;')\n        .replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\\n/g, '\\\\n');\n    };\n\n    return this;\n  }\n}\n\nexport\ndefault Compiler;"],"sourceRoot":"/source/"}