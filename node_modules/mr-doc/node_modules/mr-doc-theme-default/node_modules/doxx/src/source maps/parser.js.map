{"version":3,"sources":["parser.js"],"names":[],"mappings":"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","file":"parser.js","sourcesContent":["'use strict';\n\nimport Symbol from './symbol';\nimport _ from 'lodash';\nimport path from 'path';\nimport Dir from './dir';\nimport dox from 'dox';\nimport File from 'fs-extra';\nimport 'source-map-support/register';\n\n/**\n * The class that parses the dox tags.\n * @class Parser\n */\nclass Parser {\n  constructor(options) {\n      if (options) {\n        this.options = options;\n        this.start();\n      }\n    }\n    /**\n     * Starts the parser.\n     */\n  start() {\n      var {\n        source, extension, blacklist\n      } = this.options;\n      // Parse the files\n      this.files = Parser.parse(source, extension, blacklist);\n    }\n    /**\n     * Parses the source\n     * @param  {String|Array} source    The source(s) to parse\n     * @param  {String} extension The file extension\n     * @param  {Array} ignore    The files to ignore\n     * @return {Array}           The parsed files\n     */\n  static parse(source, extension, ignore) {\n    if (_.isArray(source)) {\n      return source.map(doc => {\n        var targetName = doc.name + '.' + extension;\n        if (!doc.targetName) doc.targetName = targetName;\n        doc.symbols = Symbol.structure(doc.dox, doc.targetName);\n        return doc;\n      });\n    } else {\n      source = path.resolve(process.cwd(), source);\n      let files = Dir.collectFiles(source, {\n        ignore\n      });\n      return files.map(file => {\n        var dox = Parser.parseComments(path.join(source, file));\n        var targetName = file + '.' + extension;\n        return {\n          name: file.replace(/\\\\/g, '/'),\n          targetName: targetName.replace(/\\\\/g, '/'),\n          dox,\n          symbols: Symbol.structure(dox, targetName)\n        };\n      });\n    }\n  }\n\n  /**\n   * Parses the source's comments using dox.\n   * @param {string} filepath The path to the source \n   * @return {object} Returns a JSON representation of the tags as an array\n   * @jsFiddle https://jsfiddle.net/iwatakeshi/8hc50sbc/embedded/\n   */\n  static parseComments(filepath) {\n      var json = null;\n      try {\n        json = dox.parseComments(File.readFileSync(filepath).toString(), {\n          raw: false\n        });\n      } catch (error) {\n        console.error('Doxx [error]:', error);\n        return [];\n      }\n\n      return json.filter(Parser.shouldPass).map(Symbol.map);\n    }\n    /**\n     * Tests if a symbol should be ignored or not.\n     * @param  {Object} symbol symbol to check against\n     * @return {Boolean} true if the symbol is not private nor must be ignored\n     */\n  static shouldPass(symbol) {\n    if (symbol.isPrivate) {\n      return false;\n    }\n    if (symbol.ignore) {\n      return false;\n    }\n\n    // Only for coffeescript\n    return symbol.tags.filter(function (tag) {\n      return tag.type === 'private' || tag.type === 'ignore';\n    }).length === 0;\n  }\n}\n\nexport default Parser;"],"sourceRoot":"/source/"}